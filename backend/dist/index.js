"use strict";var _node=require("@graphql-yoga/node");var _nanoid=require("nanoid");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable})),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key])}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}return target}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}//import pubsub from './pubsub'
var messages=[];var typeDefs="\ntype Message {\n  userID: ID!\n  text:String!\n}\n\ntype Query{\n    messages:[Message!]\n}\ninput CreateMessageInput {\n    text: String!\n  }\ntype Mutation {\n    createMessage(message: CreateMessageInput!): Message!\n}\n\ntype Subscription {\n    messages: [Message!]\n}\n\n";var resolvers={Query:{messages:function messages(_,_args,_ref){var _messages=_ref.messages;return _messages}},Mutation:{createMessage:function createMessage(_,_ref2,_ref3){var message=_ref2.message;var messages=_ref3.messages,pubsub=_ref3.pubsub;var newMessage=_objectSpread({userID:(0,_nanoid.nanoid)()},message);messages.push(newMessage);pubsub.publish("messages:change");return newMessage}},Subscription:{messages:{subscribe:function subscribe(_,__,_ref4){var pubsub=_ref4.pubsub;return(0,_node.pipe)(_node.Repeater.merge([// cause an initial event so the
// globalCounter is streamed to the client
// upon initiating the subscription
undefined,// event stream for future updates
pubsub.subscribe("messages:change")]),// map all stream values to the latest globalCounter
(0,_node.map)(function(){return messages}))},resolve:function resolve(payload){return payload}}}};var pubsub=(0,_node.createPubSub)();// Create your server
var server=(0,_node.createServer)({schema:{typeDefs:typeDefs,resolvers:resolvers},context:{pubsub:pubsub,messages:messages}});// start the server and explore http://localhost:4000/graphql
server.start();